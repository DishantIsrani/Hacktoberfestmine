#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
#define ff              first
#define ss              second
#define ll             long long
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
// #define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
#define rep(i,a,b)          for(ll i = a; i < b; ++i)
void c_p_c()
{
#ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output2.txt", "w", stdout);
#endif
}
// Binary exponentiation
ll power(ll base, ll n, ll mod) {
	ll ans = 1;
	while (n != 0) {
		if (n % 2) {
			ans = (ans * base) % mod;
			n = n - 1;
		}
		else {
			base = (base * base) % mod;
			n = n / 2;

		}

	}
	return ans;
}
vector<ll>prime;
ll arr[300007];
void SieveOfEratosthenes()
{
	// Create a boolean array
	// "prime[0..n]" and initialize
	// all entries it as true.
	// A value in prime[i] will
	// finally be false if i is
	// Not a prime, else true.
	// bool prime[n + 1];
	// memset(prime, true, sizeof(prime));

	for (int p = 2; p * p <= 300007; p++)
	{
		// If prime[p] is not changed,
		// then it is a prime
		if (arr[p] == 0)
		{
			prime.pb(p);
			// Update all multiples
			// of p greater than or
			// equal to the square of it
			// numbers which are multiple
			// of p and are less than p^2
			// are already been marked.
			for (int i = p * p; i <= 300007; i += p)
				arr[i] = 1;
		}
	}

	// Print all prime numbers
	// for (int p = 2; p <= n; p++)
	//     if (prime[p])
	//         cout << p << " ";
}
int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	c_p_c();

	w(t)
	{
		ll n,k;
		cin>>n>>k;
		

	}




}
