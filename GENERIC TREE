#include<bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
using namespace std;
// using namespace std;
#define ff              first
#define ss              second
#define ll             long long
#define pb              push_back
#define mp              make_pair
#define pii             pair<int,int>
#define vi              vector<int>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int> >
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define mod             1000000007
#define inf             1e18
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define w(x)            int x; cin>>x; while(x--)
//mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
#define rep(i,a,b)          for(ll i = a; i < b; ++i)
#define f(i,s,e) for(long long int i=s;i<e;i++)
#define cf(i,s,e) for(long long int i=s;i<=e;i++)
#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)
ll lstbt(ll val) { ll msk = val & (val - 1); return log2(val ^ msk);}
void c_p_c()
{
#ifndef ONLINE_JUDGE
	freopen("input1.txt", "r", stdin);
	freopen("output2.txt", "w", stdout);
#endif
}
template<typename T>
class TreeNode {
public:
	T data;
	std::vector<TreeNode<T>*>children;
	TreeNode(T d)
	{
		data = d;
	}
};
void print(TreeNode<ll>* root)
{
	if (root == NULL)
	{
		return;
	}
	cout << root->data << " : ";
	for (ll i = 0; i < root->children.size(); i++)
	{
		cout << root->children[i]->data << ",";
		// print(root->children[i]);

	}
	cout << endl;
	for (ll i = 0; i < root->children.size(); i++)
	{
		// cout<<root->children[i]<<",";
		print(root->children[i]);

	}

}
TreeNode<ll>* takeinput()
{

	ll rootData;
	cout << "Enter the node" << endl;
	cin >> rootData;
	TreeNode<ll>*root = new TreeNode<ll>(rootData);
	cout << "Enter the number of child of " << rootData << endl;
	ll n;
	cin >> n;
	for (ll i = 0; i < n; i++)
	{
		TreeNode<ll>*child = takeinput();
		root->children.pb(child);
	}
}
TreeNode<ll>* takeinputbylevel()
{
	ll rootData;
	// cout<<"Enter root data"<<endl;
	cin >> rootData;
	TreeNode<ll>*root = new TreeNode<ll>(rootData);
	queue<TreeNode<ll>*>q;
	q.push(root);
	while (!q.empty())
	{
		TreeNode<ll>* f = q.front();
		q.pop();
		// cout<<"Enter the number of child of "<<f->data<<endl;
		ll n;
		cin >> n;
		for (ll i = 0; i < n; i++)
		{
			ll da;
			// cout<<" enter Data of "<<i<<" child"<<endl;
			cin >> da;
			TreeNode<ll>*child = new TreeNode<ll>(da);
			f->children.pb(child);
			q.push(child);
		}


	}
	return root;
}
ll sum(TreeNode<ll>* root)
{
	if (root == NULL)
	{
		return 0;
	}
	ll ans = 0;
	ans += root->data;
	for (ll i = 0; i < root->children.size(); i++)
	{
		ll ans1 = sum(root->children[i]);
		ans += ans1;


	}

	return ans;
}
ll countNodes(TreeNode<ll>*root)
{
	if (root == NULL)
	{
		return 0;
	}
	ll ans = 1;
	for (ll i = 0; i < root->children.size(); i++)
	{
		ans += countNodes(root->children[i]);
	}
	return ans;
}
ll maxoftree(TreeNode<ll>* root)
{
	if (root == NULL)
	{
		return 0;
	}
	ll ans = INT_MIN;
	for (ll i = 0; i < root->children.size(); i++)
	{
		ll mx = maxoftree(root->children[i]);
		ans = max(mx, ans);
	}
	return max(ans, root->data);
}
ll height(TreeNode<ll>*root)
{
	if (root == NULL)
	{
		return 0;
	}
	ll ans = 0;
	for (ll i = 0; i < root->children.size(); i++)
	{
		ll h = 1 + height(root->children[i]);
		ans = max(h, ans);
	}
	return ans;
}
void printatdepthk(TreeNode<ll>*root, ll k)
{
	if (root == NULL)
	{
		return;
	}
	if (k == 0)
	{
		cout << root->data << " ";
		return;
	}
	for (ll i = 0; i < root->children.size(); i++)
	{
		printatdepthk(root->children[i], k - 1);
	}

}
ll countleafNodes(TreeNode<ll>* root)
{
	if (root == NULL)
	{
		return 0;
	}
	if (root->children.size() == 0)
	{
		return 1;
	}
	ll ans = 0;
	for (ll i = 0; i < root->children.size(); i++)
	{
		ans += countleafNodes(root->children[i]);


	}
	return ans;
}
void preorder(TreeNode<ll>*root)
{
	if (root == NULL)
	{
		return;
	}
	cout << root->data << " ";
	for (ll i = 0; i < root->children.size(); i++)
	{
		preorder(root->children[i]);
	}
}
void postorder(TreeNode<ll>*root)
{
	if (root == NULL)
	{
		return;
	}
	for (ll i = 0; i < root->children.size(); i++)
	{
		postorder(root->children[i]);
	}
	cout << root->data << " ";



}
ll countgreaterthanx(TreeNode<ll>*root, ll x)
{
	if (root == NULL)
	{
		return 0;
	}
	if (root->data > x)
	{
		return 1;

	}
	ll ans = 0;

	for (ll i = 0; i < root->children.size(); i++)
	{
		ans += countgreaterthanx(root->children[i], x);
	}
	return ans;
}
pair<TreeNode<ll>*, ll> nodewithmaxchildsum(TreeNode<ll>*root)
{
	if (root == NULL)
	{
		pair<TreeNode<ll>*, ll>p1;
		p1.first = NULL;
		p1.second = 0;
	}
	ll sum = root->data;
	for (ll i = 0; i < root->children.size(); i++)
	{
		sum += root->children[i]->data;
	}
	pair<TreeNode<ll>*, ll>p1;
	p1.first = root;
	p1.second = sum;
	pair<TreeNode<ll>*, ll>p2;
	for (ll i = 0; i < root->children.size(); i++)
	{
		p2 = nodewithmaxchildsum(root->children[i]);
		if (p2.second > p1.second)
		{
			p1.second = p2.second;
			p1.first = p2.first;
		}
	}
	return p1;

}
ll nextlarger(TreeNode<ll>*root, ll x)
{
	if (root == NULL)
	{
		return 0;
	}
	ll ans = -1;
	if (root->data > x)
	{
		ans = root->data;
	}
	for (ll i = 0; i < root->children.size(); i++)
	{
		ll c = nextlarger(root->children[i], x);
		if (ans == -1 && c > x)
		{
			ans = c;
		}
		else if (ans != -1 && c > x)
		{
			if (c < ans && ans > x)
			{
				ans = c;
			}
		}
	}
	return ans;

}
void replacewithdepth(TreeNode<ll>*root, ll d)
{
	if (root == NULL)
	{
		return;
	}
	root->data = d;
	// cout << root->data << " ";
	for (ll i = 0; i < root->children.size(); i++)
	{
		replacewithdepth(root->children[i], d + 1);
	}
}
pair<ll, ll> secondlargest(TreeNode<ll>*root)
{
	if (root == NULL)
	{
		pair<ll, ll>p1;
		p1.first = -1;
		p1.second = -1;
		return p1;
	}
	pair<ll, ll>p2;
	p2.first = root->data;
	p2.second = -1;
	for (ll i = 0; i < root->children.size(); i++)
	{
		pair<ll, ll>p3 = secondlargest(root->children[i]);

		if (p2.first < p3.first)
		{
			ll x = p2.first;
			ll y = p3.second;
			p2.first = p3.first;
			if (x > p3.second)
			{
				p2.second = x;
			}
			else {
				p2.second = y;
			}
		}
	}
	return p2;

}
int32_t main()
{
	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
	c_p_c();
	TreeNode<ll>* root = takeinputbylevel();

	// TreeNode<ll>*root = new TreeNode<ll>(1);
	// TreeNode<ll>*node1 = new TreeNode<ll>(2);
	// TreeNode<ll>*node2 = new TreeNode<ll>(3);
	// TreeNode<ll>*root=new TreeNode<ll>();
	// root->children.pb(node1);
	// root->children.pb(node2);
	// print(root);
	// return 0;
	// cout << sum(root) << endl;
	// cout << countNodes(root) << endl;
	// cout << maxoftree(root) << endl;
	// cout << height(root) << endl;
	// printatdepthk(root, 3);
	// cout << countleafNodes(root) << endl;
	// preorder(root);
	// postorder(root);
	// cout << countgreaterthanx(root, 30) << endl;
	// pair<TreeNode<ll>*, ll>p3 = nodewithmaxchildsum(root);
	// cout << p3.first->data << " " << p3.second << endl;
	// cout << nextlarger(root, 21) << endl;
	// replacewithdepth(root, 0);
	// print(root);
	pair<ll, ll>p4 = secondlargest(root);
	cout << p4.first << " " << p4.second << endl;





}






