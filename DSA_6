//Deletion of element from an linkedlist.
#include <stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next;
};

void linkedlistdisplay(struct node *ptr)
{
    while(ptr != NULL)
    {
        printf("Element : %d\n",ptr->data);
        ptr = ptr->next; 
    }
}

struct node * deleteatbegining(struct node *head)
{
    struct node *p = head;
    
    head = head->next;
    free(p);
    return head;

}

struct node * deleteatindex(struct node *head,int index)
{
    struct node *p = head;
    struct node *q = head->next;
    
    for(int i=0;i<index-1;i++)
    {
        p = p->next;
        q = q->next;
    }
    
    p->next = q->next;
    free(q);
    return head;

}

struct node * deleteatend(struct node *head)
{
    struct node *p = head;
     struct node *q = head->next;
    while(q->next!=NULL)
    {
        p=p->next;
        q = q->next;
    }
    
    p->next = NULL;
    free(q);
    return head;

}

struct node * delete_a_given_value(struct node *head,int given_value)
{
    struct node *p =head;
    struct node *q = head->next;
    while(q->data != given_value && q->next!=NULL)
    {
        p= p->next;
        q=q->next;
    }
    if(q->data == given_value)
    {
        p->next = q->next;
        free(q);
    }
    
    return head;

}

int main()
    {
        struct node *head;
        struct node *first;
        struct node *second;
        struct node *third;

        //Allocate memory for nodes in linkedlist in Heap.
         head = (struct node *)malloc(sizeof(struct node));
         first = (struct node *)malloc(sizeof(struct node));
         second = (struct node *)malloc(sizeof(struct node));
         third = (struct node *)malloc(sizeof(struct node));
        
        //Link head and first node
        head->data = 7;
        head->next = first;
        
        //Link first and second node
        first->data = 11;
        first->next = second;
        
        //Link second and third node.
        second->data = 41;
        second->next = third;
        
        // Terminate the list at the third node.
        third->data = 66;
        third->next = NULL;
        printf("linkedlist before deletion\n");
        linkedlistdisplay(head);
        printf("\nlinkedlist after deletion\n");
       // head =  deleteatbegining(head);
        //head =  deleteatindex(head,2);
       // head =  deleteatend(head);
        head = delete_a_given_value(head,41);
        linkedlistdisplay(head);




        return 0;
    }
